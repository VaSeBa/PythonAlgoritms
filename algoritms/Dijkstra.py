# алгоритм Дейкстры

def найти_самый_дешевый_путь(граф, начало, конец):
    """
    Алгоритм Дейкстры для поиска пути с минимальной стоимостью
    Книга: "Грокаем алгоритмы", глава 7 (Алгоритм Дейкстры)
    """

    # Шаг 1: Создаем таблицу стоимостей и родителей (Рис. 7.3)
    стоимости = {узел: float('inf') for узел in граф}
    стоимости[начало] = 0  # Стоимость начального узла всегда 0
    родители = {узел: None for узел in граф}
    обработанные = set()

    # Шаг 2: Находим узел с наименьшей стоимостью (без использования кучи)
    def найти_следующий_узел():
        необработанные = {узел: стоимость for узел, стоимость in стоимости.items() if узел not in обработанные}
        if not необработанные:
            return None
        print(f"min = {min(необработанные, key=необработанные.get)}")
        return min(необработанные, key=необработанные.get)

    текущий_узел = найти_следующий_узел()

    # Шаг 3: Основной цикл обработки узлов
    while текущий_узел is not None:
        стоимость = стоимости[текущий_узел]
        print("стоимость = ", стоимость)

        # Шаг 4: Обновляем стоимости для соседей
        for сосед, цена_обмена in граф[текущий_узел].items():
            новая_стоимость = стоимость + цена_обмена

            # Если найден более дешевый путь
            if новая_стоимость < стоимости[сосед]:
                стоимости[сосед] = новая_стоимость
                родители[сосед] = текущий_узел

        # Помечаем узел как обработанный
        обработанные.add(текущий_узел)
        текущий_узел = найти_следующий_узел()

    # Шаг 5: Восстанавливаем путь (Раздел "Как найти путь?")
    if стоимости[конец] == float('inf'):
        return None, None  # Путь не найден

    путь = []
    текущий = конец
    while текущий != начало:
        путь.append(текущий)
        текущий = родители[текущий]
    путь.append(начало)
    путь.reverse()

    return стоимости[конец], путь


"""
Пример графа обменов (Рис. 7.1 расширенный):
Книга → Постер (0) 
Книга → Виниловая пластинка (5)
Постер → Настольная игра (1)
Постер → Комикс (3)
Виниловая пластинка → Гитара (15)
Виниловая пластинка → Барабан (20)
Настольная игра → Пианино (25)
Комикс → Барабан (10)
Барабан → Пианино (10)
Гитара → Пианино (20)
"""
граф = {
    'Книга': {'Постер': 0, 'Виниловая пластинка': 5},
    'Постер': {'Настольная игра': 1, 'Комикс': 3},
    'Виниловая пластинка': {'Гитара': 15, 'Барабан': 20},
    'Настольная игра': {'Пианино': 25},
    'Комикс': {'Барабан': 10},
    'Гитара': {'Пианино': 20},
    'Барабан': {'Пианино': 10},
    'Пианино': {}
}

# Запускаем алгоритм (Раздел "Запуск алгоритма")
стоимость, путь = найти_самый_дешевый_путь(граф, 'Книга', 'Пианино')

print("═" * 60)
print(" Из книги «Грокаем алгоритмы»: ")
print("═" * 60)
print(f"Самый дешевый обмен будет стоить: {стоимость} единиц")
print("Цепочка обменов:")
print(" → ".join(путь))
print("═" * 60)